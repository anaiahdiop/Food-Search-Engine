{"ast":null,"code":"var _jsxFileName = \"/Users/anaiahdiop/Desktop/FullStack/Homework3/src/components/searchPage/Search.js\";\nimport React, { Component } from \"react\";\nimport Text from \"./textbox/Text.js\";\nimport recipeData from \"../../assests/data/recipe.json\";\nimport Recipe from \"../resultPage/Recipe.js\";\nimport { array } from \"yargs\";\nlet recipesArr = recipeData.recipes;\nlet recipes = recipesArr.map(recipe => {\n  return recipe;\n});\nconsole.log(recipe.title);\n/*let resultComponent = results.map(result => {\n    return(\n        <Recipe key={result.name} productInfo={result}/>\n      );\n\n})*/\n\nclass Search extends Component {\n  //constructor\n  constructor(props) {\n    super(props);\n\n    this.displaySearch = propTest => {\n      if (this.state.searched) {\n        console.log(propTest); // BY HAVING PROPS THIS IS ACTUALLY HOW IM ABLE TO GET THE DIRECT VALUE FROM MY OTHER COMPONENT\n        //console.log(resultComponent[0].props.productInfo.title)\n      }\n    };\n\n    this.state = {\n      searched: true,\n      /// ummm come back to this\n      resultList: null,\n      inputValue: null,\n      nameSelected: null,\n      ingredientSelected: null\n    };\n    this._handleClick = this._handleClick.bind(this);\n    this._handleChange = this._handleChange.bind(this); //all callbacks are invoked function style, -> context will be global context so we need to make sure we bind the context to THIS specifcally \n    //all event listeners should be binded in constructors\n    //if not binded the event wont be able to recongnize \"this\"\n  } // Methods\n\n\n  _handleClick() {\n    this.setState(previousState => {\n      // this.setState: a method that takes a function\n      return {\n        searched: !previousState.searched\n      };\n    } //this.displaySearch(),\n    );\n  }\n\n  _handleChange(e) {\n    //react automatically passes event in e \n    this.setState( // bracket for \"defining function\" parentheses invoke something \n    {\n      inputValue: e.target.value\n    });\n    this.props.inputProp(this.state.inputValue); //handlechange calls function defined in props\n  }\n\n  filterName() {\n    if (this.state.nameSelected && this.state.searched) {//Have to pass other componenet state as props\n      //const resLis = results.filter(x => x.title.toLowerCase().includes(this.state.inputValue))\n      //this.setState({data: results})\n    }\n  } //display search is a function that console.logs (test)\n\n\n  render() {\n    //displayes new html elements\n    const resultList = this.state.data; //when rendering {Text} your assinging it a prop - things that get passed down to it\n    //giving it the prop on change\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchCriteria\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.inputValue,\n      placeholder: \"Search For...\",\n      onChange: this._handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"radio\",\n      value: this.state.nameSelected,\n      name: \"categories\",\n      id: \"Name\",\n      onClick: this._handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }, \"Name\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"radio\",\n      value: this.state.ingredientSelected,\n      name: \"categories\",\n      id: \"Ingredient\",\n      onClick: this._handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"Ingredient\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }\n    }, \"Ingredient\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this._handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, \"Search!\"));\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["/Users/anaiahdiop/Desktop/FullStack/Homework3/src/components/searchPage/Search.js"],"names":["React","Component","Text","recipeData","Recipe","array","recipesArr","recipes","map","recipe","console","log","title","Search","constructor","props","displaySearch","propTest","state","searched","resultList","inputValue","nameSelected","ingredientSelected","_handleClick","bind","_handleChange","setState","previousState","e","target","value","inputProp","filterName","render","data"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAASC,KAAT,QAAsB,OAAtB;AAGA,IAAIC,UAAU,GAAGH,UAAU,CAACI,OAA5B;AACA,IAAIA,OAAO,GAAGD,UAAU,CAACE,GAAX,CAAeC,MAAM,IAAG;AAClC,SACIA,MADJ;AAGH,CAJa,CAAd;AAMAC,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,KAAnB;AACA;;;;;;;AAOA,MAAMC,MAAN,SAAqBZ,SAArB,CAA8B;AAE1B;AACAa,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAyClBC,aAzCkB,GAyCDC,QAAD,IAAa;AACzB,UAAG,KAAKC,KAAL,CAAWC,QAAd,EAAuB;AACnBT,QAAAA,OAAO,CAACC,GAAR,CAAYM,QAAZ,EADmB,CACG;AACtB;AACH;AACJ,KA9CiB;;AAEd,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,IADD;AACO;AAChBC,MAAAA,UAAU,EAAE,IAFH;AAGTC,MAAAA,UAAU,EAAE,IAHH;AAITC,MAAAA,YAAY,EAAE,IAJL;AAKTC,MAAAA,kBAAkB,EAAE;AALX,KAAb;AAOA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB,CAVc,CAUuC;AACrD;AACA;AACH,GAhByB,CAkB1B;;;AACAD,EAAAA,YAAY,GAAE;AACV,SAAKG,QAAL,CAAeC,aAAD,IAAmB;AAAC;AAC9B,aAAM;AACFT,QAAAA,QAAQ,EAAE,CAACS,aAAa,CAACT;AADvB,OAAN;AAGC,KAJL,CAKI;AALJ;AAOH;;AAEDO,EAAAA,aAAa,CAACG,CAAD,EAAG;AAAE;AACd,SAAKF,QAAL,EAAe;AACZ;AAACN,MAAAA,UAAU,EAAEQ,CAAC,CAACC,MAAF,CAASC;AAAtB,KADH;AAGA,SAAKhB,KAAL,CAAWiB,SAAX,CAAqB,KAAKd,KAAL,CAAWG,UAAhC,EAJY,CAIgC;AAC/C;;AAEDY,EAAAA,UAAU,GAAE;AACR,QAAG,KAAKf,KAAL,CAAWI,YAAX,IAA2B,KAAKJ,KAAL,CAAWC,QAAzC,EAAkD,CAAE;AAChD;AACA;AACH;AACJ,GAzCyB,CA2C1B;;;AAQAe,EAAAA,MAAM,GAAE;AAAE;AACN,UAAMd,UAAU,GAAG,KAAKF,KAAL,CAAWiB,IAA9B,CADI,CAGJ;AACA;;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAO,MAAA,IAAI,EAAG,MAAd;AAAqB,MAAA,KAAK,EAAI,KAAKjB,KAAL,CAAWG,UAAzC;AAAqD,MAAA,WAAW,EAAG,eAAnE;AAAmF,MAAA,QAAQ,EAAI,KAAKK,aAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAGI;AAAO,MAAA,IAAI,EAAG,OAAd;AAAsB,MAAA,KAAK,EAAI,KAAKR,KAAL,CAAWI,YAA1C;AAAwD,MAAA,IAAI,EAAC,YAA7D;AAA0E,MAAA,EAAE,EAAC,MAA7E;AAAoF,MAAA,OAAO,EAAI,KAAKE,YAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,eAIQ;AAAO,MAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJR,eAKI;AAAO,MAAA,IAAI,EAAG,OAAd;AAAsB,MAAA,KAAK,EAAI,KAAKN,KAAL,CAAWK,kBAA1C;AAA8D,MAAA,IAAI,EAAC,YAAnE;AAAgF,MAAA,EAAE,EAAC,YAAnF;AAAgG,MAAA,OAAO,EAAI,KAAKC,YAAhH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,eAMQ;AAAO,MAAA,OAAO,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANR,eAQI;AAAQ,MAAA,OAAO,EAAE,KAAKA,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBARJ,CADJ;AAaH;;AArEyB;;AA0E9B,eAAeX,MAAf","sourcesContent":["import React, {Component} from \"react\";\nimport Text from \"./textbox/Text.js\";\nimport recipeData from \"../../assests/data/recipe.json\"\nimport Recipe from \"../resultPage/Recipe.js\"\nimport { array } from \"yargs\";\n\n\nlet recipesArr = recipeData.recipes\nlet recipes = recipesArr.map(recipe =>{\n    return(\n        recipe\n    )\n})\n\nconsole.log(recipe.title)\n/*let resultComponent = results.map(result => {\n    return(\n        <Recipe key={result.name} productInfo={result}/>\n      );\n\n})*/\n\nclass Search extends Component{\n\n    //constructor\n    constructor(props){ \n        super(props);\n        this.state = {\n            searched: true, /// ummm come back to this\n            resultList: null,\n            inputValue: null,\n            nameSelected: null,\n            ingredientSelected: null, \n        };\n        this._handleClick = this._handleClick.bind(this)\n        this._handleChange = this._handleChange.bind(this);  //all callbacks are invoked function style, -> context will be global context so we need to make sure we bind the context to THIS specifcally \n        //all event listeners should be binded in constructors\n        //if not binded the event wont be able to recongnize \"this\"\n    }\n\n    // Methods\n    _handleClick(){\n        this.setState((previousState) => {// this.setState: a method that takes a function\n            return{\n                searched: !previousState.searched,\n            }\n            },\n            //this.displaySearch(),\n        );\n    }\n\n    _handleChange(e){ //react automatically passes event in e \n        this.setState( // bracket for \"defining function\" parentheses invoke something \n           {inputValue: e.target.value}\n        );\n        this.props.inputProp(this.state.inputValue) //handlechange calls function defined in props\n    }\n\n    filterName(){\n        if(this.state.nameSelected && this.state.searched){ //Have to pass other componenet state as props\n            //const resLis = results.filter(x => x.title.toLowerCase().includes(this.state.inputValue))\n            //this.setState({data: results})\n        }\n    }\n\n    //display search is a function that console.logs (test)\n    displaySearch = (propTest) =>{\n        if(this.state.searched){\n            console.log(propTest) // BY HAVING PROPS THIS IS ACTUALLY HOW IM ABLE TO GET THE DIRECT VALUE FROM MY OTHER COMPONENT\n            //console.log(resultComponent[0].props.productInfo.title)\n        }\n    }\n\n    render(){ //displayes new html elements\n        const resultList = this.state.data\n\n        //when rendering {Text} your assinging it a prop - things that get passed down to it\n        //giving it the prop on change\n        return(\n            <div className=\"searchCriteria\">\n\n                <input type = \"text\" value = {this.state.inputValue} placeholder = \"Search For...\" onChange = {this._handleChange}></input>\n                <input type = \"radio\" value = {this.state.nameSelected} name=\"categories\" id=\"Name\" onClick = {this._handleClick}></input>\n                    <label htmlFor=\"Name\">Name</label>\n                <input type = \"radio\" value = {this.state.ingredientSelected} name=\"categories\" id=\"Ingredient\" onClick = {this._handleClick}></input>\n                    <label htmlFor=\"Ingredient\">Ingredient</label>\n\n                <button onClick={this._handleClick}>Search!</button>\n            </div>\n\n        );\n    }\n\n}\n\n\nexport default Search;"]},"metadata":{},"sourceType":"module"}